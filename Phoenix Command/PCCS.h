#pragma once
#include "main.h"

struct hitroll
{
	int minrange;
	int maxrange;
	string limb;
	string locname;
	int LVD;
	string desc;
	int OPDC[3];
	string OPDesc[3];

	hitroll(int min, int max, string limbname, string hitloc, int LVDamage, string LVDesc, int OPDC1, int OPDC2, int OPDC3, string OPDesc1, string OPDesc2, string OPDesc3);
};

extern struct PCCS
{
	vector<vector<double>> base_speed_table =                                       // Base Speed Table Array
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },    // 0 0 index
		{ 1.5, 1.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, // STR 1
		{ 2.0, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, // STR 2
		{ 2.5, 2.0, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, // STR 3
		{ 2.5, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, // STR 4
		{ 2.5, 2.5, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 }, // STR 5
		{ 2.5, 2.5, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 }, // STR 6
		{ 2.5, 2.5, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 }, // STR 7
		{ 3.0, 2.5, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 }, // STR 8
		{ 3.0, 2.5, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 }, // STR 9
		{ 3.0, 2.5, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 }, // STR 10
		{ 3.0, 2.5, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 }, // STR 11
		{ 3.0, 2.5, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 }, // STR 12
		{ 3.0, 2.5, 2.5, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0 }, // STR 13
		{ 3.0, 2.5, 2.5, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 1.0, 0.0 }, // STR 14
		{ 3.0, 3.0, 2.5, 2.5, 2.0, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0, 0.0 }, // STR 15
		{ 3.5, 3.0, 2.5, 2.5, 2.5, 2.5, 2.0, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0 }, // STR 16
		{ 3.5, 3.0, 3.0, 3.0, 2.5, 2.5, 2.5, 2.5, 2.0, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.5, 1.0 }, // STR 17
		{ 4.0, 3.5, 3.5, 3.0, 3.0, 3.0, 2.5, 2.5, 2.5, 2.5, 2.5, 2.0, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5 }, // STR 18
		{ 4.0, 4.0, 3.5, 3.5, 3.0, 3.0, 3.0, 3.0, 3.0, 2.5, 2.5, 2.5, 2.5, 2.5, 2.0, 2.0, 2.0, 1.5 }, // STR 19
		{ 4.5, 4.0, 4.0, 3.5, 3.5, 3.5, 3.5, 3.5, 3.0, 3.0, 3.0, 3.0, 3.0, 2.5, 2.5, 2.5, 2.5, 2.0 }, // STR 20
		{ 4.5, 4.5, 4.0, 4.0, 4.0, 3.5, 3.5, 3.5, 3.5, 3.5, 3.0, 3.0, 3.0, 3.0, 3.0, 2.5, 2.5, 2.0 } // STR 21

	};

	vector<vector<int>> max_speed_table =                                           // Max Speed Table Array
	{
		{ 0, 0, 0, 0, 0,  0,  0,  0 },                               // 0 0 index
		{ 1, 1, 1, 2, 2,  2,  3,  3 },                               // AGI 1
		{ 1, 1, 2, 2, 3,  3,  4,  4 },                               // AGI 2
		{ 1, 2, 2, 3, 3,  4,  4,  5 },                               // AGI 3
		{ 1, 2, 3, 3, 4,  4,  5,  6 },                               // AGI 4
		{ 1, 2, 3, 4, 4,  5,  6,  6 },                               // AGI 5
		{ 2, 2, 3, 4, 5,  5,  6,  7 },                               // AGI 6
		{ 2, 3, 3, 4, 5,  6,  7,  8 },                               // AGI 7
		{ 2, 3, 4, 4, 5,  6,  7,  8 },                               // AGI 8
		{ 2, 3, 4, 5, 6,  7,  8,  9 },                               // AGI 9
		{ 2, 3, 4, 5, 6,  7,  8,  9 },                               // AGI 10
		{ 2, 3, 4, 5, 6,  7,  8,  9 },                               // AGI 11
		{ 2, 3, 4, 5, 7,  8,  9, 10 },                               // AGI 12
		{ 2, 3, 4, 6, 7,  8,  9, 10 },                               // AGI 13
		{ 2, 3, 4, 6, 7,  8,  9, 11 },                               // AGI 14
		{ 2, 3, 5, 6, 7,  9, 10, 11 },                               // AGI 15
		{ 2, 3, 5, 6, 8,  9, 10, 11 },                               // AGI 16
		{ 2, 3, 5, 6, 8,  9, 10, 12 },                               // AGI 17
		{ 2, 4, 5, 6, 8,  9, 11, 12 },                               // AGI 18
		{ 2, 4, 5, 7, 8, 10, 11, 12 },                               // AGI 19
		{ 2, 4, 5, 7, 8, 10, 11, 13 },                               // AGI 20
		{ 2, 4, 5, 7, 9, 10, 12, 13 }                                // AGI 21
	};

	vector<int> skill_accuracy_table = { 0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };

	// Base Speed Table encumbrance index

	vector<int> BST_enc_index = { 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, 90, 100, 125, 150, 200 };

	// Max Speed Table base speed index

	vector<double> MST_base_index = { 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 };

	vector<vector<int>> CA_table =                                                 // Combat Actions
	{
		{ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },		// 0 index
		{ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2 },		// 1 MS
		{ 1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4,  4 },		// 2 MS
		{ 1,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6 },		// 3 MS
		{ 2,  2,  3,  3,  4,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7 },		// 4 MS
		{ 2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  7,  8,  8,  8,  9,  9 },		// 5 MS
		{ 3,  3,  4,  5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10, 11, 11 },		// 6 MS
		{ 3,  4,  5,  5,  6,  7,  7,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13 },		// 7 MS
		{ 3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 11, 12, 12, 13, 14, 14, 15 },		// 8 MS
		{ 4,  5,  6,  7,  8,  9, 10, 10, 11, 12, 13, 13, 14, 15, 15, 16, 17 },		// 9 MS
		{ 4,  6,  8,  8,  9, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 18, 18 },		// 10 MS
		{ 5,  6,  7,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 19, 20 },		// 11 MS
		{ 5,  7,  8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22 },		// 12 MS
		{ 6,  7,  9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }		// 13 MS

	};

	vector<int> CA_ISF_index =
	{ 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39 }; // CA MS Index

	vector<vector<int>> CAPI_table =
	{
		{ 0, 0, 0, 0, 0 },		// CA 0 index
		{ 0, 1, 0, 0, 0 },		// CA 1
		{ 0, 1, 0, 1, 0 },		// CA 2
		{ 0, 1, 0, 1, 1 },		// CA 3
		{ 0, 1, 1, 1, 1 },		// CA 4
		{ 0, 2, 1, 1, 1 },		// CA 5
		{ 0, 2, 1, 2, 1 },		// CA 6
		{ 0, 2, 1, 2, 2 },		// CA 7
		{ 0, 2, 2, 2, 2 },		// CA 8
		{ 0, 3, 2, 2, 2 },		// CA 9
		{ 0, 3, 2, 3, 2 },		// CA 10
		{ 0, 3, 2, 3, 3 },		// CA 11
		{ 0, 3, 3, 3, 3 },		// CA 12
		{ 0, 4, 3, 3, 3 },		// CA 13
		{ 0, 4, 3, 4, 3 },		// CA 14
		{ 0, 4, 3, 4, 4 },		// CA 15
		{ 0, 4, 4, 4, 4 },		// CA 16
		{ 0, 5, 4, 4, 4 },		// CA 17
		{ 0, 5, 4, 5, 4 },		// CA 18
		{ 0, 5, 4, 5, 5 },		// CA 19
		{ 0, 5, 5, 5, 5 },		// CA 20
		{ 0, 6, 5, 5, 5 },		// CA 21
		{ 0, 6, 5, 6, 5 },		// CA 22
		{ 0, 6, 5, 6, 6 },		// CA 23
		{ 0, 6, 6, 6, 6 },		// CA 24
	};

	vector<int> Shot_Accuracy_Index =
	{
		-30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -11, -10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,
		0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
		16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30, 31, 32, 33, 34
	};

	vector<int> Target_Range_Index =
	{
		2, 3, 4, 6, 7, 10, 20, 40, 70, 100, 200, 300
	};

	vector<vector<int>> Odds_of_Hitting =											// Cross Reference Shot Accuracy and Target Range
	{
		{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
		{ 1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
		{ 2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
		{ 3,   1,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
		{ 5,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0 },
		{ 7,   4,   2,   1,   1,   0,   0,   0,   0,   0,   0,   0 },
		{ 12,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0 },
		{ 18,   9,   6,   3,   2,   1,   0,   0,   0,   0,   0,   0 },
		{ 27,  15,   9,   5,   4,   2,   0,   0,   0,   0,   0,   0 },
		{ 39,  22,  15,   7,   6,   3,   1,   0,   0,   0,   0,   0 },
		{ 46,  27,  18,   9,   7,   4,   1,   0,   0,   0,   0,   0 },
		{ 53,  33,  22,  12,   9,   5,   1,   0,   0,   0,   0,   0 },
		{ 60,  39,  27,  15,  12,   6,   2,   0,   0,   0,   0,   0 },
		{ 67,  46,  33,  18,  15,   7,   2,   1,   0,   0,   0,   0 },
		{ 74,  53,  39,  22,  18,   9,   3,   1,   0,   0,   0,   0 },
		{ 80,  60,  46,  27,  22,  12,   4,   1,   0,   0,   0,   0 },
		{ 86,  67,  53,  33,  27,  15,   5,   2,   0,   0,   0,   0 },
		{ 90,  74,  60,  39,  33,  18,   6,   2,   0,   0,   0,   0 },
		{ 94,  80,  67,  46,  39,  22,   7,   3,   1,   0,   0,   0 },
		{ 96,  86,  74,  53,  46,  27,   9,   4,   1,   0,   0,   0 },
		{ 98,  90,  80,  60,  53,  33,  12,   5,   1,   1,   0,   0 },
		{ 100, 94,  86,  67,  60,  39,  15,   6,   2,   1,   0,   0 },
		{ 100, 96,  90,  74,  67,  46,  18,   7,   2,   1,   0,   0 },
		{ 100, 98,  94,  80,  74,  53,  22,   9,   3,   2,   0,   0 },
		{ 100, 100, 96,  86,  80,  60,  27,  12,   4,   2,   0,   0 },
		{ 100, 100, 98,  90,  86,  67,  33,  15,   5,   3,   1,   0 },
		{ 100, 100, 100, 94,  90,  74,  39,  18,   6,   4,   1,   0 },
		{ 100, 100, 100, 96,  94,  80,  46,  22,   7,   5,   1,   0 },
		{ 100, 100, 100, 98,  96,  86,  53,  27,   9,   6,   2,   1 },
		{ 100, 100, 100, 100, 98,  90,  60,  33,  12,   7,   2,   1 },
		{ 100, 100, 100, 100, 100, 94,  67,  39,  15,   9,   3,   1 },
		{ 100, 100, 100, 100, 100, 96,  74,  46,  18,  12,   4,   2 },
		{ 100, 100, 100, 100, 100, 98,  80,  53,  22,  15,   5,   2 },
		{ 100, 100, 100, 100, 100, 100, 86,  60,  27,  18,   6,   3 },
		{ 100, 100, 100, 100, 100, 100, 90,  67,  33,  22,   7,   4 },
		{ 100, 100, 100, 100, 100, 100, 94,  74,  39,  27,   9,   5 },
		{ 100, 100, 100, 100, 100, 100, 96,  80,  46,  33,  12,   6 },
		{ 100, 100, 100, 100, 100, 100, 98,  86,  53,  39,  15,   7 },
		{ 100, 100, 100, 100, 100, 100, 100, 90,  60,  46,  18,   9 },
		{ 100, 100, 100, 100, 100, 100, 100, 94,  67,  53,  22,  12 },
		{ 100, 100, 100, 100, 100, 100, 100, 96,  74,  60,  27,  15 },
		{ 100, 100, 100, 100, 100, 100, 100, 96,  80,  67,  33,  18 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 86,  74,  39,  22 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 90,  80,  46,  27 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 94,  86,  53,  33 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 96,  90,  60,  39 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 98,  94,  67,  46 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 96,  74,  53 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 98,  80,  60 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 86,  67 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 90,  74 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 94,  80 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 96,  86 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 98,  90 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 94 },
		{ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 96 }
	};

	vector<hitroll> FAChitloc;
	vector<hitroll> ITOhitloc;

	void PCCS::ConstructFACtable();
	void PCCS::ConstructITOtable();
	PCCS::PCCS();
} PCCS;